"$ git init " - создаёт новый локальный репозиторий в текущей директории. Для
создания нового проекта в GIT необходимо перейти в директорию, где будет
располагаться проект, и, вызвав командную стоку ввести команду "$ git init ".
Команда создает поддиректорию .git содержащую всю базу Git-репозитория, но
проект еще не находится под контролем Git.

" .gitignore " - специальная директория в которой перечисляются шаблоны файлов
или каталоги, которые вы не только не хотите автоматически добавлять в
репозиторий, но и видеть в списках неотслеживаемых. К таким файлам обычно
относятся автоматически генерируемые файлы (различные логи, результаты сборки
программ и т.п.).
GitHub поддерживает довольно полный список примеров .gitignore файлов для
множества проектов и языков https://github.com/github/gitignore это может
стать отправной точкой для .gitignore в вашем проекте.

"$ git config --global user.name <user_name> " - создаёт учетную запись или
переименовывает пользователя.

"$ git config --global user.email <innoname@email.ru> " - связывает учетную
запись с адресом email.

"$ git config --list " - выводит данные об активном пользователе.

"$ git config --color.ui true " - позволяет настроить визуальный вывод данных
для пользователя - настройки интерфейса могут облегчить восприятие, выделив
нужные места разными цветами.

"$ git add " - добавляет файлы в индекс для последующего коммита. 

"$ git commit " - сохраняет изменения в репозитории, создавая новый коммит.
Для добавления файлов в Git необходимо добавить их в индекс и произвести
коммит, используя команды "$ git add " и "$ git commit ":
  $ git add 
  $ git commit -m 'initial project version'
Все  файлы, находящиеся в директории, будут закоммичены. С этого момента
проект находится под версионным контролем, поскольку в Git-репозитории
располагаются отслеживаемые файлы и начальный коммит.
"$ git commit -a -m 'initial project version' " - позволяет пропустить этап
индексирования, добавление параметра -a в команду "$ git commit " заставляет
Git автоматически индексировать каждый уже отслеживаемый на момент коммита
файл, позволяя вам обойтись без "$ git add "

"$ git clone " - клонирует репозиторий с удаленного сервера на локальный
компьютер. Для клонирования существующего репозитория необходимо скопировать
с сервера слепок всех файлов, имеющих отношение к репозиторию. Для этого
используется команда "$ git clone ", к которой добавляется ссылка на
существующий репозиторий, а также (при  необходимости) новое имя
склонированного репозитория. Например:
  $ git clone https://github.com/libgit2/libgit2
в данном случае репозиторий будет называться libgit2. Возможно также задать
другое имя директории:
  $ git clone https://github.com/libgit2/libgit2 newrepo
В данном случае репозиторий будет называться newrepo.

"$ git status " - Отображает текущее состояние репозитория, показывая изменения,
которые были добавлены в индекс.
"$ git status -s " || "$ git status --short " - Отображает текущее состояние
репозитория в сокращенном виде, показывая изменения, которые были добавлены в
индекс.

"$ git log " - Отображает историю коммитов в текущей ветке. Перечисляет
коммиты, сделанные в репозитории в обратном к хронологическому порядке –
последние коммиты находятся вверху, команда перечисляет коммиты с их SHA-1
контрольными суммами, именем и электронной почтой автора, датой создания и
сообщением коммита.
Наиболее распространенные опции для команды "$ git log ":
  -p - показывает патч(изменения) для каждого коммита.
  -'number' - где 'number' - целое число (1, 2, 3, ..., n), показывает не все
              а только поледние 'number' коммитов.
  --stat - показывает статистику измененных файлов для каждого коммита.
  --shortstat - отображает только строку с количеством
                изменений/вставок/удалений для команды --stat.
  --name-only - показывает список измененных файлов после информации о
                коммите.
  --name-status - показывает список файлов, которые
                  добавлены/изменены/удалены.
  --abbrev-commit - показывает только несколько символов SHA-1 чек-суммы
                    вместо всех 40.
  --relative-date - отображает дату в относительном формате
                    (например,"2 weeks ago") вместо стандартного формата даты.
  --graph - отображает - ASCII граф с ветвлениями и историей слияний.
  --since, --after - показывает только те коммиты, которые были сделаны
                     после указанной даты.
  --until, --before - показывает только те коммиты, которые были сделаны до
                      указанной даты.
  --author - показывает только те коммиты, в которых запись author
             совпадает с указанной строкой.
  --committer - показывает только те коммиты, в которых запись committer
                совпадает с указанной строкой.
  --grep - показывает только коммиты, сообщение которых содержит
           указанную строку.
  -S - показывает только коммиты, в которых изменение в коде повлекло за собой
       добавление или удаление указанной строки.
  --pretty показывает - коммиты в альтернативном формате.
  Возможные варианты опций:
    oneline, short, full, fuller и format (с помощью последней опции вы
можете указать свой формат).
ПРИМЕРЫ:
  $ git log -p -2 - один из самых полезных аргументов -p - показывает разницу,
внесенную в каждый коммит. Аргумент -2, позволяет установить лимит на вывод
количества коммитов. В данном случае их будет только два.
  $ git log --stat - отображает сокращенную статистику для каждого коммита,
печатает под каждым из коммитов список и количество измененных файлов и
сколько строк в каждом из файлов было добавлено и удалено. В конце выводится
суммарная таблица изменений.
  $ git log pretty - меняет формат вывода. Возможны разные варианты
отображения, например, опция oneline:
  $ git log pretty=oneline - печатает каждый коммит в одну строку, что может
быть очень удобным если вы просматриваете большое количество коммитов. Опции
short, full и fuller делают вывод приблизительно в том же формате, но с
меньшим или большим количеством информации соответственно.
Наиболее интересной опцией является format - позволяет создать свой формат для
вывода информации. Это удобно когда вы хотите сгенерировать вывод для
автоматического анализа – так как вы указываете формат явно, он не будет
изменен даже после обновления Git:
$ git log --pretty=format:"%h - %an, %ar : %s"
  ca82a6d - Scott Chacon, 6 years ago : changed the version number
  085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
  a11bef0 - Scott Chacon, 6 years ago : first commit
Полезные опции(спецификаторы) для git log --pretty=format:
    %H  - хеш коммита
    %h  - сокращенный хеш коммита
    %T  - хеш дерева
    %t  - сокращенный хеш дерева
    %P  - хеш родителей
    %p  - сокращенный хеш родителей
    %an - имя автора
    %ae - электронная почта автора
    %ad - дата автора (формат даты можно задать опцией --date=option)
    %ar - относительная дата автора
    %cn - имя коммитера
    %ce - электронная почта коммитера
    %cd - дата коммитера
    %cr - относительная дата коммитера
    %s  - содержание

Опции oneline и format являются особенно полезными с опцией --graph команды
log. С этой опцией вы сможете увидеть небольшой граф в формате ASCII, который
показывает текущую ветку и историю слияний:
  $ git log --pretty=format:"%h %s" --graph
    * 2d3acf9 ignore errors from SIGCHLD on trap
    * 5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
    |\
    | * 420eac9 Added a method for getting the current branch.
    * | 30e367c timeout code and tests
    * | 5a09431 add timeout protection to grit
    * | e1193f8 support for heads with slashes in them
    |/
    * d6016bc require time for xmlschema
    * 11d191e Merge branch 'defunkt' into local

Опции для ограничения вывода по времени --since и --until, очень удобны.
Cледующая команда покажет список коммитов, сделанных за последние две недели:
  $ git log --since=2.weeks
Этa команда работает с большим количеством форматов – вы можете указать
определенную дату вида "2008-01-15" или же относительную дату, например
"2 years 1 day 3 minutes ago".
Опция --author фильтрет по автору коммита, а опция --grep позволяет искать по
ключевым словам в сообщении коммита. (если вы хотите фильтровать коммиты по
автору и ключевым словам одновременно, необходимо также добавить --all-match
иначе команда отфильтрует вывод по одному из двух критериев.)
Опция -S, которая, как аргумент, принимает строку и показывает только те
коммиты, в которых изменение в коде повлекло за собой добавление или удаление
этой строки. Например, если нужен последний коммит, который добавил или удалил
вызов определенной функции, вы можете запустить команду:
  $ git log -Sfunction_name
  $ git log --<<file_name> || <dir_name>> если указать директорию или имя файла,
вы ограничите вывод только теми коммитами, где были изменения этих файлов. Эта
опция всегда указывается последней после двойного тире (--), что отделяет
указываемый путь от опций.
Если необходимо увидеть, в каких коммитах произошли изменения в тестовых
файлах в истории исходного кода Git, автором которых был Junio Hamano и
которые не были слияниями в октябре 2008 года, вы можете запустить следующую
команду:
  $ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
  --before="2008-11-01" --no-merges -- t/
    5610e3b - Fix testcase failure when extended attributes are in use
    acd3b9e - Enhance hold_lock_file_for_{update,append}() API
    f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
    d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
    51a94af - Fix "checkout --track -b newbranch" on detached HEAD
    b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn
    branch

"$ git branch " - Создает новую ветку или отображает список имеющихся веток.

"$ git checkout " - Переключает ветки или возвращает файлы к определенному
коммиту.
"$ git checkout -b <branch_name> " - Создает новую ветку с именем 
<branch_name> и переключается в эту ветку.

"$ git merge " - Объединяет (производит слияние) двух веток.

"$ git push origin <branch_name> " - Отправляет изменения на удаленный сервер.

"$ git pull " - Получает изменения с удаленного сервера и объединяет их с
локальным репозиторием.

"$ git fetch " - Получает изменения с удаленного сервера без объединения с
локальным репозиторием.

"$ git diff " - Отображает различия между версиями файлов в текущей и других
ветках или коммитах.
"$ git diff --staged " || "$ git diff --cached " - эти команды сравнивают ваши
индексированные изменения с последним коммитом, они показывают, что вы
проиндексировали и что войдёт в следующий коммит.
Существует еще один способ просматривать изменения, если вы предпочитаете
графический просмотр или внешнюю программу просмотра различий, вместо консоли.
"$ git difftool " - таким образом можно просмотреть изменения в файле с
помощью таких программ как ARAXIS, EMERGE, VIMDIFF и других. Выполните:
"$ git difftool --tool-help " - чтобы увидеть какие из них уже установлены в
вашей системе.
"$ git difftool --tool=vimdiff " - покажет изменения в файлах в программе
vimdiff

"$ git tag " - Создает новый тег для определенного коммита.

"$ git stash " - Сохраняет изменения, которые не были закоммичены в отдельной
области хранения и позволяет вернуться к ним позже.

"$ git rm " - удаляет файл из Git, точнее, удаляет его из вашего индекса, а
также удаляет файл из вашего рабочего каталога, так что вы в следующий раз не
увидите его как “неотслеживаемый”.

"$ git rm --cached <file_name> " - позволяет удалить файл из индекса, оставив
его при этом в рабочем каталоге, т.е. оставляет файл на жёстком диске, и
убирает его из-под бдительного ока Git. Это полезно, если вы забыли добавить
что-то в файл .gitignore и по ошибке проиндексировали, например, большой файл
с логами, или кучу промежуточных файлов компиляции.
В команду git rm можно передавать файлы, каталоги или glob-шаблоны. Это
означает, что вы можете вытворять что-то вроде:
  $ git rm log/\*.log
Обратите внимание на обратный слэш (\) перед *. Он необходим из-за того, что
Git использует свой собственный обработчик имён файлов вдобавок к обработчику
вашего командного интерпретатора. Эта команда удаляет все файлы имеющие
расширение .log находящиеся в директории log/.

"$ git mv file_from file_to " - переименовывает файл в Git.
