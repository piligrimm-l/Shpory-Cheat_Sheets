" git config --global user.name <user_name> " - создаёт учетную запись или переименовывает пользователя.


" git config --global user.email <innoname@email.ru> " - связывает учетную запись с адресом email.


" git config --list " - выводит данные об активном пользователе.


" git config --color.ui true " - позволяет настроить визуальный вывод данных для пользователя - настройки интерфейса могут облегчить восприятие, выделив нужные места разными цветами.


" git init " - создаёт новый локальный репозиторий в текущей директории. Для создания нового проекта в GIT необходимо перейти в директорию, где будет располагаться проект, и, вызвав командную стоку ввести команду "git init". Команда создает поддиректорию .git содержащую всю базу Git-репозитория, но проект еще не находится под контролем Git.


" git add " - добавляет файлы в индекс для последующего коммита. 


" git commit " - сохраняет изменения в репозитории, создавая новый коммит. Для добавления файлов в Git необходимо добавить их в индекс и произвести коммит, используя команды git add и git commit: $ git add .$ git commit -m 'initial project version'. Все  файлы, находящиеся в директории, будут закоммичены. С этого момента проект находится под версионным контролем, поскольку в Git-репозитории располагаются отслеживаемые файлы и начальный коммит.


" git clone " - клонирует репозиторий с удаленного сервера на локальный компьютер. Для клонирования существующего репозитория необходимо скопировать с сервера слепок всех файлов, имеющих отношение к репозиторию. Для этого используется команда " git clone ", к которой добавляется ссылка на существующий репозиторий, а также (при  необходимости) новое имя склонированного репозитория. 
Например: $ git clone https://github.com/libgit2/libgit2 в данном случае репозиторий будет называться libgit2.
Возможно также задать другое имя директории: $ git clone https://github.com/libgit2/libgit2 newrepo В данном случае репозиторий будет называться newrepo.


git status: Отображает текущее состояние репозитория, показывая изменения, которые были добавлены в индекс.


git log: Отображает историю коммитов в текущей ветке.


git branch: Создает новую ветку или отображает список имеющихся веток.


git checkout: Переключает ветки или возвращает файлы к определенному коммиту.


git merge: Объединяет изменения из одной ветки в другую.


git push: Отправляет изменения на удаленный сервер.


git pull: Получает изменения с удаленного сервера и объединяет их с локальным репозиторием.


git fetch: Получает изменения с удаленного сервера без объединения с локальным репозиторием.


git diff: Отображает различия между версиями файлов в текущей и других ветках или коммитах.


git tag: Создает новый тег для определенного коммита.


git stash: Сохраняет изменения, которые не были закоммичены в отдельной области хранения и позволяет вернуться к ним позже.
